{"version":3,"sources":["components/Formulario.jsx","components/Cita.jsx","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuid","htmlFor","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f9b11827.chunk.js","sourcesContent":["import React, { Fragment,useState } from \"react\";\r\nimport uuid from 'uuid/dist/v4';\r\n\r\n\r\nconst Formulario = ({crearCita}) => {\r\n\r\n    // Crear state de citas\r\n    const [cita, actualizarCita] = useState({\r\n        mascota: \"\",\r\n        propietario:\"\",\r\n        fecha:\"\",\r\n        hora:\"\",\r\n        sintomas:\"\"\r\n    });\r\n\r\n    const [error, actualizarError] = useState(false);\r\n\r\n    //Funcion cuando se escribe en un input\r\n\r\n    const actualizarState = (e) =>{\r\n        actualizarCita({\r\n            ...cita,\r\n            [e.target.name] : e.target.value,\r\n        })\r\n    }\r\n    \r\n    //extraer valores\r\n\r\n    const {mascota,propietario,fecha,hora,sintomas} = cita\r\n\r\n    // cuando se envia formulario\r\n\r\n    const submitCita = (e) =>{\r\n        e.preventDefault();\r\n\r\n        //validar\r\n        if(mascota.trim() === \"\" || propietario.trim() === \"\" || fecha.trim() === \"\" || hora.trim() === \"\" || sintomas.trim() === \"\"){\r\n            actualizarError(true);\r\n            return;\r\n        }\r\n            actualizarError(false);\r\n        \r\n        //asignar id\r\n        cita.id = uuid();\r\n        //crear cita\r\n\r\n        crearCita(cita);\r\n\r\n        //reiniciar form\r\n        actualizarCita({\r\n            mascota: \"\",\r\n            propietario:\"\",\r\n            fecha:\"\",\r\n            hora:\"\",\r\n            sintomas:\"\"\r\n        })\r\n\r\n    }\r\n\r\n  return (\r\n    <Fragment>\r\n      <h2>Crear Cita</h2>\r\n      {error ? <p className=\"alerta-error\">Todos los campos son obligatorios</p> :null}\r\n      <form \r\n        onSubmit={submitCita}\r\n      >\r\n        <label htmlFor=\"\">Nombre Mascota</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"mascota\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Nombre Mascota\"\r\n          onChange={actualizarState}\r\n          value={mascota}\r\n        />\r\n\r\n        <label htmlFor=\"\">Propietario</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"propietario\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Nombre Propietario\"\r\n          onChange={actualizarState}\r\n          value={propietario}\r\n\r\n        />\r\n\r\n        <label htmlFor=\"\">Fecha</label>\r\n        <input type=\"date\" name=\"fecha\" className=\"u-full-width\" onChange={actualizarState} value={fecha} />\r\n\r\n        <label htmlFor=\"\">Hora</label>\r\n        <input type=\"time\" name=\"hora\" className=\"u-full-width\" onChange={actualizarState} value={hora} />\r\n\r\n        <label htmlFor=\"\">Sintomas</label>\r\n        <textarea name=\"sintomas\" className=\"u-full-width\" onChange={actualizarState} value={sintomas}></textarea>\r\n\r\n        <button type=\"submit\" className=\"u-full-width button-primary\">\r\n          Agregar cita\r\n        </button>\r\n      </form>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Formulario;\r\n","import React from 'react';\r\n\r\nconst Cita = ({cita,eliminarCita}) => {\r\n    return ( \r\n        <div className=\"cita\">\r\n            <p>Mascota:<span>{cita.mascota}</span></p>\r\n            <p>Propietario:<span>{cita.propietario}</span></p>\r\n            <p>Fecha:<span>{cita.fecha}</span></p>\r\n            <p>Hora:<span>{cita.hora}</span></p>\r\n            <p>Sintomas:<span>{cita.sintomas}</span></p>\r\n            <button\r\n                className=\"button eliminar u-full-width\"\r\n                onClick={ () => eliminarCita(cita.id) }\r\n            >Eliminar &times;</button>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Cita;","import React, { Fragment,useState,useEffect } from \"react\";\nimport Formulario from \"./components/Formulario\"\nimport Cita from \"./components/Cita\"\nfunction App() {\n\n  //citas en local storage\n\n  let citasIniciales = JSON.parse(localStorage.getItem(\"citas\"));\n  if(!citasIniciales){\n    citasIniciales=[];\n  }\n  \n  //Arreglo de citas\n  const [citas, guardarCitas] = useState(citasIniciales);\n\n  //use effect paraa realizar ciertas operaciones cuando el state cambia\n\n  useEffect(() => {\n    if(citasIniciales){\n      localStorage.setItem(\"citas\",JSON.stringify(citas))\n      }else{\n        localStorage.setItem(\"citas\",JSON.stringify([]));\n    }\n  },[citas]);\n  \n\n  //funcion que toma las citas actuales y agregue la nueva\n\n  const crearCita = (cita) =>{\n    guardarCitas([\n      ...citas,\n      cita\n    ]);\n  }\n\n  //funcion elimina cita\n   const eliminarCita =(id)=>{\n    const nuevasCitas = citas.filter(cita =>cita.id !==id);\n    guardarCitas(nuevasCitas);\n  }\n\n  //mensaje condicional\n\n    const titulo = citas.length===0 ?\"No hay citas\"  : \"Administra tus citas\";\n  return (\n    <Fragment>\n      <h1>Administrador de pacientes</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n             <div className=\"one-half column\">\n               <Formulario\n                crearCita={crearCita}\n               />\n             </div>\n\n             <div className=\"one-half column\">\n               <h2>{titulo}</h2>\n               {citas.map(cita =>(\n                 <Cita\n                    key={cita.id}\n                    cita={cita}\n                    eliminarCita={eliminarCita}\n                 />\n               ))}\n             </div>       \n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}